const nearley = require('nearley')
// require the grammer js module generated by nearleyc
const grammar = require('./grammar')
const { prepare } = require('./prepare')
const { transform, transform_condense } = require('./transform')

// parse func parses the input query accordance with various options provided.
// Along with the query it takes other parameters such as
// condense which indicates weather the query value is broken down (true) or not (false),
// defOpt sets the default operator for query value if none is provided.
// defOptMap consists of field to operator map based on which we override
// the default operator for those certain fields,
// children indicate weather we use child syntax where left and right nodes
// are present inside a child property recursively for representing broken down query or not,
// eql determines weather to create a elastic search boolean query (true) or
// a parse tree (false),
// transformFn is a callback function which receives the current node that is being processed
// and can modify its properties/behavior.
function parse (q, condense = false, { defOpt = 'AND', defOptMap = {}, children = true, eql = false, transformFn = null } = {}) {
  // Create a Parser object from our grammar.
  const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar))

  // Feed the input query after pre processing to the parser.
  parser.feed(prepare(q, { defOpt, defOptMap }).q)

  // pick the first parsing from the array.
  const [tree] = parser.results

  // console.dir(tree, { depth: null })

  // call appropriate transformer based on condense parameter.
  return condense ? transform_condense(tree) : transform(tree, { children, eql, transformFn })
}

module.exports = { parse }
